

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Sep 15 19:36:20 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15324
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F15324 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  0012                     	;# 
    69  0014                     	;# 
    70  0018                     	;# 
    71  001A                     	;# 
    72  009B                     	;# 
    73  009B                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  0119                     	;# 
    79  0119                     	;# 
    80  0119                     	;# 
    81  011A                     	;# 
    82  011A                     	;# 
    83  011A                     	;# 
    84  011B                     	;# 
    85  011B                     	;# 
    86  011B                     	;# 
    87  011B                     	;# 
    88  011B                     	;# 
    89  011C                     	;# 
    90  011C                     	;# 
    91  011C                     	;# 
    92  011D                     	;# 
    93  011D                     	;# 
    94  011D                     	;# 
    95  011E                     	;# 
    96  011E                     	;# 
    97  011E                     	;# 
    98  011F                     	;# 
    99  011F                     	;# 
   100  011F                     	;# 
   101  011F                     	;# 
   102  011F                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  018E                     	;# 
   106  018F                     	;# 
   107  0190                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  020C                     	;# 
   111  020C                     	;# 
   112  020D                     	;# 
   113  020E                     	;# 
   114  020F                     	;# 
   115  020F                     	;# 
   116  0210                     	;# 
   117  0210                     	;# 
   118  0211                     	;# 
   119  0211                     	;# 
   120  028C                     	;# 
   121  028C                     	;# 
   122  028D                     	;# 
   123  028D                     	;# 
   124  028E                     	;# 
   125  028F                     	;# 
   126  0290                     	;# 
   127  0291                     	;# 
   128  030C                     	;# 
   129  030C                     	;# 
   130  030D                     	;# 
   131  030E                     	;# 
   132  030F                     	;# 
   133  0310                     	;# 
   134  0310                     	;# 
   135  0311                     	;# 
   136  0312                     	;# 
   137  0313                     	;# 
   138  0314                     	;# 
   139  0314                     	;# 
   140  0315                     	;# 
   141  0316                     	;# 
   142  0318                     	;# 
   143  0318                     	;# 
   144  0319                     	;# 
   145  031A                     	;# 
   146  031C                     	;# 
   147  031C                     	;# 
   148  031D                     	;# 
   149  031E                     	;# 
   150  038C                     	;# 
   151  038C                     	;# 
   152  038D                     	;# 
   153  038E                     	;# 
   154  058C                     	;# 
   155  058C                     	;# 
   156  058D                     	;# 
   157  058E                     	;# 
   158  058F                     	;# 
   159  058F                     	;# 
   160  0590                     	;# 
   161  0591                     	;# 
   162  0592                     	;# 
   163  0593                     	;# 
   164  059C                     	;# 
   165  059C                     	;# 
   166  059D                     	;# 
   167  059D                     	;# 
   168  059E                     	;# 
   169  059F                     	;# 
   170  060C                     	;# 
   171  060D                     	;# 
   172  060E                     	;# 
   173  060F                     	;# 
   174  0610                     	;# 
   175  0611                     	;# 
   176  0612                     	;# 
   177  0613                     	;# 
   178  0614                     	;# 
   179  070C                     	;# 
   180  070D                     	;# 
   181  070E                     	;# 
   182  070F                     	;# 
   183  0710                     	;# 
   184  0711                     	;# 
   185  0712                     	;# 
   186  0713                     	;# 
   187  0716                     	;# 
   188  0717                     	;# 
   189  0718                     	;# 
   190  0719                     	;# 
   191  071A                     	;# 
   192  071B                     	;# 
   193  071C                     	;# 
   194  071D                     	;# 
   195  0796                     	;# 
   196  0797                     	;# 
   197  0798                     	;# 
   198  0799                     	;# 
   199  079A                     	;# 
   200  079B                     	;# 
   201  080C                     	;# 
   202  080D                     	;# 
   203  080E                     	;# 
   204  080F                     	;# 
   205  0810                     	;# 
   206  0811                     	;# 
   207  0812                     	;# 
   208  0813                     	;# 
   209  0814                     	;# 
   210  081A                     	;# 
   211  081A                     	;# 
   212  081B                     	;# 
   213  081C                     	;# 
   214  081C                     	;# 
   215  081D                     	;# 
   216  081E                     	;# 
   217  081F                     	;# 
   218  088C                     	;# 
   219  088D                     	;# 
   220  088E                     	;# 
   221  088F                     	;# 
   222  0890                     	;# 
   223  0891                     	;# 
   224  0892                     	;# 
   225  0893                     	;# 
   226  0895                     	;# 
   227  0896                     	;# 
   228  090C                     	;# 
   229  090E                     	;# 
   230  090F                     	;# 
   231  091F                     	;# 
   232  098F                     	;# 
   233  098F                     	;# 
   234  0990                     	;# 
   235  0991                     	;# 
   236  0992                     	;# 
   237  0993                     	;# 
   238  0994                     	;# 
   239  0995                     	;# 
   240  0996                     	;# 
   241  0997                     	;# 
   242  0A19                     	;# 
   243  0A19                     	;# 
   244  0A1A                     	;# 
   245  0A1A                     	;# 
   246  0A1B                     	;# 
   247  0A1B                     	;# 
   248  0A1B                     	;# 
   249  0A1C                     	;# 
   250  0A1C                     	;# 
   251  0A1D                     	;# 
   252  0A1D                     	;# 
   253  0A1E                     	;# 
   254  0A1E                     	;# 
   255  0A1F                     	;# 
   256  0A1F                     	;# 
   257  0A1F                     	;# 
   258  1E0F                     	;# 
   259  1E10                     	;# 
   260  1E11                     	;# 
   261  1E12                     	;# 
   262  1E13                     	;# 
   263  1E14                     	;# 
   264  1E15                     	;# 
   265  1E16                     	;# 
   266  1E17                     	;# 
   267  1E18                     	;# 
   268  1E19                     	;# 
   269  1E1A                     	;# 
   270  1E1B                     	;# 
   271  1E1C                     	;# 
   272  1E1D                     	;# 
   273  1E1E                     	;# 
   274  1E1F                     	;# 
   275  1E20                     	;# 
   276  1E21                     	;# 
   277  1E22                     	;# 
   278  1E23                     	;# 
   279  1E24                     	;# 
   280  1E25                     	;# 
   281  1E26                     	;# 
   282  1E27                     	;# 
   283  1E28                     	;# 
   284  1E29                     	;# 
   285  1E2A                     	;# 
   286  1E2B                     	;# 
   287  1E2C                     	;# 
   288  1E2D                     	;# 
   289  1E2E                     	;# 
   290  1E2F                     	;# 
   291  1E30                     	;# 
   292  1E31                     	;# 
   293  1E32                     	;# 
   294  1E33                     	;# 
   295  1E34                     	;# 
   296  1E35                     	;# 
   297  1E36                     	;# 
   298  1E37                     	;# 
   299  1E8F                     	;# 
   300  1E90                     	;# 
   301  1E91                     	;# 
   302  1E92                     	;# 
   303  1E93                     	;# 
   304  1E9C                     	;# 
   305  1EA1                     	;# 
   306  1EA2                     	;# 
   307  1EB1                     	;# 
   308  1EBB                     	;# 
   309  1EBC                     	;# 
   310  1EBD                     	;# 
   311  1EBE                     	;# 
   312  1EC3                     	;# 
   313  1EC5                     	;# 
   314  1EC6                     	;# 
   315  1EC7                     	;# 
   316  1ECB                     	;# 
   317  1ECC                     	;# 
   318  1ECD                     	;# 
   319  1ECE                     	;# 
   320  1F10                     	;# 
   321  1F11                     	;# 
   322  1F12                     	;# 
   323  1F13                     	;# 
   324  1F14                     	;# 
   325  1F15                     	;# 
   326  1F20                     	;# 
   327  1F21                     	;# 
   328  1F22                     	;# 
   329  1F23                     	;# 
   330  1F24                     	;# 
   331  1F25                     	;# 
   332  1F38                     	;# 
   333  1F39                     	;# 
   334  1F3A                     	;# 
   335  1F3B                     	;# 
   336  1F3C                     	;# 
   337  1F3D                     	;# 
   338  1F3E                     	;# 
   339  1F3F                     	;# 
   340  1F4E                     	;# 
   341  1F4F                     	;# 
   342  1F50                     	;# 
   343  1F51                     	;# 
   344  1F52                     	;# 
   345  1F53                     	;# 
   346  1F54                     	;# 
   347  1F55                     	;# 
   348  1FE4                     	;# 
   349  1FE5                     	;# 
   350  1FE6                     	;# 
   351  1FE7                     	;# 
   352  1FE8                     	;# 
   353  1FE8                     	;# 
   354  1FE9                     	;# 
   355  1FEA                     	;# 
   356  1FEA                     	;# 
   357  1FEB                     	;# 
   358  1FED                     	;# 
   359  1FEE                     	;# 
   360  1FEF                     	;# 
   361  0000                     	;# 
   362  0001                     	;# 
   363  0002                     	;# 
   364  0003                     	;# 
   365  0004                     	;# 
   366  0005                     	;# 
   367  0006                     	;# 
   368  0007                     	;# 
   369  0008                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  000E                     	;# 
   375  0012                     	;# 
   376  0014                     	;# 
   377  0018                     	;# 
   378  001A                     	;# 
   379  009B                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  009F                     	;# 
   385  0119                     	;# 
   386  0119                     	;# 
   387  0119                     	;# 
   388  011A                     	;# 
   389  011A                     	;# 
   390  011A                     	;# 
   391  011B                     	;# 
   392  011B                     	;# 
   393  011B                     	;# 
   394  011B                     	;# 
   395  011B                     	;# 
   396  011C                     	;# 
   397  011C                     	;# 
   398  011C                     	;# 
   399  011D                     	;# 
   400  011D                     	;# 
   401  011D                     	;# 
   402  011E                     	;# 
   403  011E                     	;# 
   404  011E                     	;# 
   405  011F                     	;# 
   406  011F                     	;# 
   407  011F                     	;# 
   408  011F                     	;# 
   409  011F                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  018E                     	;# 
   413  018F                     	;# 
   414  0190                     	;# 
   415  0191                     	;# 
   416  0192                     	;# 
   417  020C                     	;# 
   418  020C                     	;# 
   419  020D                     	;# 
   420  020E                     	;# 
   421  020F                     	;# 
   422  020F                     	;# 
   423  0210                     	;# 
   424  0210                     	;# 
   425  0211                     	;# 
   426  0211                     	;# 
   427  028C                     	;# 
   428  028C                     	;# 
   429  028D                     	;# 
   430  028D                     	;# 
   431  028E                     	;# 
   432  028F                     	;# 
   433  0290                     	;# 
   434  0291                     	;# 
   435  030C                     	;# 
   436  030C                     	;# 
   437  030D                     	;# 
   438  030E                     	;# 
   439  030F                     	;# 
   440  0310                     	;# 
   441  0310                     	;# 
   442  0311                     	;# 
   443  0312                     	;# 
   444  0313                     	;# 
   445  0314                     	;# 
   446  0314                     	;# 
   447  0315                     	;# 
   448  0316                     	;# 
   449  0318                     	;# 
   450  0318                     	;# 
   451  0319                     	;# 
   452  031A                     	;# 
   453  031C                     	;# 
   454  031C                     	;# 
   455  031D                     	;# 
   456  031E                     	;# 
   457  038C                     	;# 
   458  038C                     	;# 
   459  038D                     	;# 
   460  038E                     	;# 
   461  058C                     	;# 
   462  058C                     	;# 
   463  058D                     	;# 
   464  058E                     	;# 
   465  058F                     	;# 
   466  058F                     	;# 
   467  0590                     	;# 
   468  0591                     	;# 
   469  0592                     	;# 
   470  0593                     	;# 
   471  059C                     	;# 
   472  059C                     	;# 
   473  059D                     	;# 
   474  059D                     	;# 
   475  059E                     	;# 
   476  059F                     	;# 
   477  060C                     	;# 
   478  060D                     	;# 
   479  060E                     	;# 
   480  060F                     	;# 
   481  0610                     	;# 
   482  0611                     	;# 
   483  0612                     	;# 
   484  0613                     	;# 
   485  0614                     	;# 
   486  070C                     	;# 
   487  070D                     	;# 
   488  070E                     	;# 
   489  070F                     	;# 
   490  0710                     	;# 
   491  0711                     	;# 
   492  0712                     	;# 
   493  0713                     	;# 
   494  0716                     	;# 
   495  0717                     	;# 
   496  0718                     	;# 
   497  0719                     	;# 
   498  071A                     	;# 
   499  071B                     	;# 
   500  071C                     	;# 
   501  071D                     	;# 
   502  0796                     	;# 
   503  0797                     	;# 
   504  0798                     	;# 
   505  0799                     	;# 
   506  079A                     	;# 
   507  079B                     	;# 
   508  080C                     	;# 
   509  080D                     	;# 
   510  080E                     	;# 
   511  080F                     	;# 
   512  0810                     	;# 
   513  0811                     	;# 
   514  0812                     	;# 
   515  0813                     	;# 
   516  0814                     	;# 
   517  081A                     	;# 
   518  081A                     	;# 
   519  081B                     	;# 
   520  081C                     	;# 
   521  081C                     	;# 
   522  081D                     	;# 
   523  081E                     	;# 
   524  081F                     	;# 
   525  088C                     	;# 
   526  088D                     	;# 
   527  088E                     	;# 
   528  088F                     	;# 
   529  0890                     	;# 
   530  0891                     	;# 
   531  0892                     	;# 
   532  0893                     	;# 
   533  0895                     	;# 
   534  0896                     	;# 
   535  090C                     	;# 
   536  090E                     	;# 
   537  090F                     	;# 
   538  091F                     	;# 
   539  098F                     	;# 
   540  098F                     	;# 
   541  0990                     	;# 
   542  0991                     	;# 
   543  0992                     	;# 
   544  0993                     	;# 
   545  0994                     	;# 
   546  0995                     	;# 
   547  0996                     	;# 
   548  0997                     	;# 
   549  0A19                     	;# 
   550  0A19                     	;# 
   551  0A1A                     	;# 
   552  0A1A                     	;# 
   553  0A1B                     	;# 
   554  0A1B                     	;# 
   555  0A1B                     	;# 
   556  0A1C                     	;# 
   557  0A1C                     	;# 
   558  0A1D                     	;# 
   559  0A1D                     	;# 
   560  0A1E                     	;# 
   561  0A1E                     	;# 
   562  0A1F                     	;# 
   563  0A1F                     	;# 
   564  0A1F                     	;# 
   565  1E0F                     	;# 
   566  1E10                     	;# 
   567  1E11                     	;# 
   568  1E12                     	;# 
   569  1E13                     	;# 
   570  1E14                     	;# 
   571  1E15                     	;# 
   572  1E16                     	;# 
   573  1E17                     	;# 
   574  1E18                     	;# 
   575  1E19                     	;# 
   576  1E1A                     	;# 
   577  1E1B                     	;# 
   578  1E1C                     	;# 
   579  1E1D                     	;# 
   580  1E1E                     	;# 
   581  1E1F                     	;# 
   582  1E20                     	;# 
   583  1E21                     	;# 
   584  1E22                     	;# 
   585  1E23                     	;# 
   586  1E24                     	;# 
   587  1E25                     	;# 
   588  1E26                     	;# 
   589  1E27                     	;# 
   590  1E28                     	;# 
   591  1E29                     	;# 
   592  1E2A                     	;# 
   593  1E2B                     	;# 
   594  1E2C                     	;# 
   595  1E2D                     	;# 
   596  1E2E                     	;# 
   597  1E2F                     	;# 
   598  1E30                     	;# 
   599  1E31                     	;# 
   600  1E32                     	;# 
   601  1E33                     	;# 
   602  1E34                     	;# 
   603  1E35                     	;# 
   604  1E36                     	;# 
   605  1E37                     	;# 
   606  1E8F                     	;# 
   607  1E90                     	;# 
   608  1E91                     	;# 
   609  1E92                     	;# 
   610  1E93                     	;# 
   611  1E9C                     	;# 
   612  1EA1                     	;# 
   613  1EA2                     	;# 
   614  1EB1                     	;# 
   615  1EBB                     	;# 
   616  1EBC                     	;# 
   617  1EBD                     	;# 
   618  1EBE                     	;# 
   619  1EC3                     	;# 
   620  1EC5                     	;# 
   621  1EC6                     	;# 
   622  1EC7                     	;# 
   623  1ECB                     	;# 
   624  1ECC                     	;# 
   625  1ECD                     	;# 
   626  1ECE                     	;# 
   627  1F10                     	;# 
   628  1F11                     	;# 
   629  1F12                     	;# 
   630  1F13                     	;# 
   631  1F14                     	;# 
   632  1F15                     	;# 
   633  1F20                     	;# 
   634  1F21                     	;# 
   635  1F22                     	;# 
   636  1F23                     	;# 
   637  1F24                     	;# 
   638  1F25                     	;# 
   639  1F38                     	;# 
   640  1F39                     	;# 
   641  1F3A                     	;# 
   642  1F3B                     	;# 
   643  1F3C                     	;# 
   644  1F3D                     	;# 
   645  1F3E                     	;# 
   646  1F3F                     	;# 
   647  1F4E                     	;# 
   648  1F4F                     	;# 
   649  1F50                     	;# 
   650  1F51                     	;# 
   651  1F52                     	;# 
   652  1F53                     	;# 
   653  1F54                     	;# 
   654  1F55                     	;# 
   655  1FE4                     	;# 
   656  1FE5                     	;# 
   657  1FE6                     	;# 
   658  1FE7                     	;# 
   659  1FE8                     	;# 
   660  1FE8                     	;# 
   661  1FE9                     	;# 
   662  1FEA                     	;# 
   663  1FEA                     	;# 
   664  1FEB                     	;# 
   665  1FED                     	;# 
   666  1FEE                     	;# 
   667  1FEF                     	;# 
   668                           
   669                           	psect	idataBANK0
   670  054E                     __pidataBANK0:	
   671                           
   672                           ;initializer for _rotate_left
   673  054E  3402               	retlw	2
   674  054F  3400               	retlw	0
   675  0550  3403               	retlw	3
   676  0551  3401               	retlw	1
   677                           
   678                           ;initializer for _rotate_right
   679  0552  3401               	retlw	1
   680  0553  3403               	retlw	3
   681  0554  3400               	retlw	0
   682  0555  3402               	retlw	2
   683  001A                     _LATCbits	set	26
   684  0018                     _LATAbits	set	24
   685  0014                     _TRISCbits	set	20
   686  0012                     _TRISAbits	set	18
   687  0014                     _TRISC	set	20
   688  0012                     _TRISA	set	18
   689  009C                     _ADRESH	set	156
   690  009D                     _ADCON0bits	set	157
   691  009D                     _ADCON0	set	157
   692  009E                     _ADCON1	set	158
   693  0812                     _VREGCON	set	2066
   694  088C                     _CPUDOZEbits	set	2188
   695  1F50                     _ODCONCbits	set	8016
   696  1F3A                     _ODCONAbits	set	7994
   697  1F4E                     _ANSELCbits	set	8014
   698  1F38                     _ANSELAbits	set	7992
   699  1F4E                     _ANSELC	set	8014
   700  1F38                     _ANSELA	set	7992
   701                           
   702                           ; #config settings
   703  0000                     
   704                           	psect	cinit
   705  07F1                     start_initialization:	
   706  07F1                     __initialization:	
   707                           
   708                           ; Initialize objects allocated to BANK0
   709  07F1  304E               	movlw	low __pidataBANK0
   710  07F2  0084               	movwf	4
   711  07F3  3085               	movlw	(high __pidataBANK0)| (0+128)
   712  07F4  0085               	movwf	5
   713  07F5  303E               	movlw	low __pdataBANK0
   714  07F6  0086               	movwf	6
   715  07F7  3000               	movlw	high __pdataBANK0
   716  07F8  0087               	movwf	7
   717  07F9  3008               	movlw	8
   718  07FA  3185  2548  3187   	fcall	init_ram
   719  07FD                     end_of_initialization:	
   720                           ;End of C runtime variable initialization code
   721                           
   722  07FD                     __end_of__initialization:	
   723  07FD  0140               	movlb	0
   724  07FE  3187  2F12         	ljmp	_main	;jump to C main() function
   725                           
   726                           	psect	dataBANK0
   727  003E                     __pdataBANK0:	
   728  003E                     _rotate_left:	
   729  003E                     	ds	4
   730  0042                     _rotate_right:	
   731  0042                     	ds	4
   732                           
   733                           	psect	inittext
   734  0548                     init_ram:	
   735  0548  00FE               	movwf	btemp
   736  0549                     initloop:	
   737  0549  0012               	moviw fsr0++
   738  054A  001E               	movwi fsr1++
   739  054B  0BFE               	decfsz	btemp,f
   740  054C  2D49               	goto	initloop
   741  054D  3400               	retlw	0
   742                           
   743                           	psect	cstackCOMMON
   744  0070                     __pcstackCOMMON:	
   745  0070                     ?_PIC_SETUP:	
   746  0070                     ??_PIC_SETUP:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ?_main:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_readADC:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ?___wmul:	
   756                           ; 2 bytes @ 0x0
   757                           
   758  0070                     ___wmul@multiplier:	
   759                           ; 2 bytes @ 0x0
   760                           
   761                           
   762                           ; 2 bytes @ 0x0
   763  0070                     	ds	2
   764  0072                     ??_readADC:	
   765  0072                     ___wmul@multiplicand:	
   766                           ; 1 bytes @ 0x2
   767                           
   768                           
   769                           ; 2 bytes @ 0x2
   770  0072                     	ds	2
   771  0074                     ??___wmul:	
   772  0074                     readADC@channel:	
   773                           ; 1 bytes @ 0x4
   774                           
   775  0074                     ___wmul@product:	
   776                           ; 1 bytes @ 0x4
   777                           
   778                           
   779                           ; 2 bytes @ 0x4
   780  0074                     	ds	2
   781  0076                     ?___awdiv:	
   782  0076                     ___awdiv@divisor:	
   783                           ; 2 bytes @ 0x6
   784                           
   785                           
   786                           ; 2 bytes @ 0x6
   787  0076                     	ds	2
   788  0078                     ___awdiv@dividend:	
   789                           
   790                           ; 2 bytes @ 0x8
   791  0078                     	ds	2
   792  007A                     ??___awdiv:	
   793                           
   794                           ; 1 bytes @ 0xA
   795  007A                     	ds	1
   796  007B                     ??_Map:	
   797  007B                     ??_get_y:	
   798                           ; 1 bytes @ 0xB
   799                           
   800  007B                     ??_get_x:	
   801                           ; 1 bytes @ 0xB
   802                           
   803                           
   804                           ; 1 bytes @ 0xB
   805  007B                     	ds	1
   806  007C                     ??_main:	
   807                           
   808                           ; 1 bytes @ 0xC
   809  007C                     	ds	1
   810                           
   811                           	psect	cstackBANK0
   812  0020                     __pcstackBANK0:	
   813  0020                     ___awdiv@counter:	
   814                           
   815                           ; 1 bytes @ 0x0
   816  0020                     	ds	1
   817  0021                     ___awdiv@sign:	
   818                           
   819                           ; 1 bytes @ 0x1
   820  0021                     	ds	1
   821  0022                     ___awdiv@quotient:	
   822                           
   823                           ; 2 bytes @ 0x2
   824  0022                     	ds	2
   825  0024                     ?_Map:	
   826  0024                     Map@x:	
   827                           ; 2 bytes @ 0x4
   828                           
   829                           
   830                           ; 2 bytes @ 0x4
   831  0024                     	ds	2
   832  0026                     Map@inMin:	
   833                           
   834                           ; 2 bytes @ 0x6
   835  0026                     	ds	2
   836  0028                     Map@inMax:	
   837                           
   838                           ; 2 bytes @ 0x8
   839  0028                     	ds	2
   840  002A                     Map@outMin:	
   841                           
   842                           ; 2 bytes @ 0xA
   843  002A                     	ds	2
   844  002C                     Map@outMax:	
   845                           
   846                           ; 2 bytes @ 0xC
   847  002C                     	ds	2
   848  002E                     ?_get_y:	
   849  002E                     ?_get_x:	
   850                           ; 2 bytes @ 0xE
   851                           
   852  002E                     get_y@y:	
   853                           ; 2 bytes @ 0xE
   854                           
   855  002E                     get_x@x:	
   856                           ; 2 bytes @ 0xE
   857                           
   858                           
   859                           ; 2 bytes @ 0xE
   860  002E                     	ds	2
   861  0030                     main@x_prev:	
   862                           
   863                           ; 2 bytes @ 0x10
   864  0030                     	ds	2
   865  0032                     main@y_prev:	
   866                           
   867                           ; 2 bytes @ 0x12
   868  0032                     	ds	2
   869  0034                     main@x_steps:	
   870                           
   871                           ; 2 bytes @ 0x14
   872  0034                     	ds	2
   873  0036                     main@y_steps:	
   874                           
   875                           ; 2 bytes @ 0x16
   876  0036                     	ds	2
   877  0038                     main@x:	
   878                           
   879                           ; 2 bytes @ 0x18
   880  0038                     	ds	2
   881  003A                     main@y:	
   882                           
   883                           ; 2 bytes @ 0x1A
   884  003A                     	ds	2
   885  003C                     main@x_out:	
   886                           
   887                           ; 1 bytes @ 0x1C
   888  003C                     	ds	1
   889  003D                     main@y_out:	
   890                           
   891                           ; 1 bytes @ 0x1D
   892  003D                     	ds	1
   893                           
   894                           	psect	maintext
   895  0712                     __pmaintext:	
   896 ;;
   897 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   898 ;;
   899 ;; *************** function _main *****************
   900 ;; Defined at:
   901 ;;		line 71 in file "main.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  y               2   26[BANK0 ] short 
   906 ;;  x               2   24[BANK0 ] short 
   907 ;;  y_steps         2   22[BANK0 ] short 
   908 ;;  x_steps         2   20[BANK0 ] short 
   909 ;;  y_prev          2   18[BANK0 ] short 
   910 ;;  x_prev          2   16[BANK0 ] short 
   911 ;;  y_out           1   29[BANK0 ] unsigned char 
   912 ;;  x_out           1   28[BANK0 ] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : B3F/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   922 ;;      Params:         0       0       0       0       0       0       0       0
   923 ;;      Locals:         0      14       0       0       0       0       0       0
   924 ;;      Temps:          1       0       0       0       0       0       0       0
   925 ;;      Totals:         1      14       0       0       0       0       0       0
   926 ;;Total ram usage:       15 bytes
   927 ;; Hardware stack levels required when called:    3
   928 ;; This function calls:
   929 ;;		_PIC_SETUP
   930 ;;		_get_x
   931 ;;		_get_y
   932 ;; This function is called by:
   933 ;;		Startup code after reset
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           
   938                           ;psect for function _main
   939  0712                     _main:	
   940  0712                     l973:	
   941                           ;incstack = 0
   942                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   943                           
   944                           
   945                           ;main.c: 73:  PIC_SETUP();
   946  0712  3185  2556  3187   	fcall	_PIC_SETUP
   947  0715                     l975:	
   948                           
   949                           ;main.c: 75:  int16_t x = 0;
   950  0715  0140               	movlb	0	; select bank0
   951  0716  01B8               	clrf	main@x
   952  0717  01B9               	clrf	main@x+1
   953  0718                     l977:	
   954                           
   955                           ;main.c: 76:  int16_t y = 0;
   956  0718  01BA               	clrf	main@y
   957  0719  01BB               	clrf	main@y+1
   958                           
   959                           ;main.c: 78:     y = get_y(y);
   960  071A  083B               	movf	main@y+1,w
   961  071B  00AF               	movwf	get_y@y+1
   962  071C  083A               	movf	main@y,w
   963  071D  00AE               	movwf	get_y@y
   964  071E  3186  26A5  3187   	fcall	_get_y
   965  0721  0140               	movlb	0	; select bank0
   966  0722  082F               	movf	?_get_y+1,w
   967  0723  00BB               	movwf	main@y+1
   968  0724  082E               	movf	?_get_y,w
   969  0725  00BA               	movwf	main@y
   970                           
   971                           ;main.c: 79:     x = get_x(x);
   972  0726  0839               	movf	main@x+1,w
   973  0727  00AF               	movwf	get_x@x+1
   974  0728  0838               	movf	main@x,w
   975  0729  00AE               	movwf	get_x@x
   976  072A  3186  2638  3187   	fcall	_get_x
   977  072D  0140               	movlb	0	; select bank0
   978  072E  082F               	movf	?_get_x+1,w
   979  072F  00B9               	movwf	main@x+1
   980  0730  082E               	movf	?_get_x,w
   981  0731  00B8               	movwf	main@x
   982  0732                     l979:	
   983                           
   984                           ;main.c: 81:     int16_t x_prev = x;
   985  0732  0839               	movf	main@x+1,w
   986  0733  00B1               	movwf	main@x_prev+1
   987  0734  0838               	movf	main@x,w
   988  0735  00B0               	movwf	main@x_prev
   989  0736                     l981:	
   990                           
   991                           ;main.c: 82:     int16_t y_prev = y;
   992  0736  083B               	movf	main@y+1,w
   993  0737  00B3               	movwf	main@y_prev+1
   994  0738  083A               	movf	main@y,w
   995  0739  00B2               	movwf	main@y_prev
   996  073A                     l983:	
   997  073A                     l985:	
   998  073A                     l987:	
   999                           
  1000                           ;main.c: 87:  char x_out = 0;
  1001  073A  01BC               	clrf	main@x_out
  1002  073B                     l989:	
  1003                           
  1004                           ;main.c: 88:  char y_out = 0;
  1005  073B  01BD               	clrf	main@y_out
  1006  073C                     l991:	
  1007                           
  1008                           ;main.c: 90:     LATAbits.LATA5 = y_out;
  1009  073C  1298               	bcf	24,5	;volatile
  1010  073D                     l993:	
  1011                           
  1012                           ;main.c: 91:     LATCbits.LATC5 = y_out>>1;
  1013  073D  129A               	bcf	26,5	;volatile
  1014  073E                     l995:	
  1015                           
  1016                           ;main.c: 92:     LATCbits.LATC2 = x_out;
  1017  073E  111A               	bcf	26,2	;volatile
  1018  073F                     l997:	
  1019                           
  1020                           ;main.c: 93:     LATCbits.LATC3 = x_out>>1;
  1021  073F  119A               	bcf	26,3	;volatile
  1022  0740                     l59:	
  1023                           ;main.c: 95:  while(1) {
  1024                           
  1025  0740  0064               	clrwdt	;# 
  1026                           
  1027                           ;main.c: 100:         y = (int16_t) get_y(y);
  1028  0741  0140               	movlb	0	; select bank0
  1029  0742  083B               	movf	main@y+1,w
  1030  0743  00AF               	movwf	get_y@y+1
  1031  0744  083A               	movf	main@y,w
  1032  0745  00AE               	movwf	get_y@y
  1033  0746  3186  26A5  3187   	fcall	_get_y
  1034  0749  0140               	movlb	0	; select bank0
  1035  074A  082F               	movf	?_get_y+1,w
  1036  074B  00BB               	movwf	main@y+1
  1037  074C  082E               	movf	?_get_y,w
  1038  074D  00BA               	movwf	main@y
  1039                           
  1040                           ;main.c: 101:         x = (int16_t) get_x(x);
  1041  074E  0839               	movf	main@x+1,w
  1042  074F  00AF               	movwf	get_x@x+1
  1043  0750  0838               	movf	main@x,w
  1044  0751  00AE               	movwf	get_x@x
  1045  0752  3186  2638  3187   	fcall	_get_x
  1046  0755  0140               	movlb	0	; select bank0
  1047  0756  082F               	movf	?_get_x+1,w
  1048  0757  00B9               	movwf	main@x+1
  1049  0758  082E               	movf	?_get_x,w
  1050  0759  00B8               	movwf	main@x
  1051  075A                     l999:	
  1052                           
  1053                           ;main.c: 103:   x_steps = (int16_t) x - x_prev;
  1054  075A  0830               	movf	main@x_prev,w
  1055  075B  0238               	subwf	main@x,w
  1056  075C  00B4               	movwf	main@x_steps
  1057  075D  0831               	movf	main@x_prev+1,w
  1058  075E  3B39               	subwfb	main@x+1,w
  1059  075F  00B5               	movwf	main@x_steps+1
  1060  0760                     l1001:	
  1061                           
  1062                           ;main.c: 104:   y_steps = (int16_t) y - y_prev;
  1063  0760  0832               	movf	main@y_prev,w
  1064  0761  023A               	subwf	main@y,w
  1065  0762  00B6               	movwf	main@y_steps
  1066  0763  0833               	movf	main@y_prev+1,w
  1067  0764  3B3B               	subwfb	main@y+1,w
  1068  0765  00B7               	movwf	main@y_steps+1
  1069  0766                     l1003:	
  1070                           
  1071                           ;main.c: 106:   x_prev = x;
  1072  0766  0839               	movf	main@x+1,w
  1073  0767  00B1               	movwf	main@x_prev+1
  1074  0768  0838               	movf	main@x,w
  1075  0769  00B0               	movwf	main@x_prev
  1076  076A                     l1005:	
  1077                           
  1078                           ;main.c: 107:   y_prev = y;
  1079  076A  083B               	movf	main@y+1,w
  1080  076B  00B3               	movwf	main@y_prev+1
  1081  076C  083A               	movf	main@y,w
  1082  076D  00B2               	movwf	main@y_prev
  1083                           
  1084                           ;main.c: 109:   while((x_steps != 0) || (y_steps != 0)) {
  1085  076E  2FE2               	goto	l1039
  1086  076F                     l1007:	
  1087                           
  1088                           ;main.c: 111:    if(x_steps > 0) {
  1089  076F  0835               	movf	main@x_steps+1,w
  1090  0770  3A80               	xorlw	128
  1091  0771  00FC               	movwf	??_main
  1092  0772  3080               	movlw	128
  1093  0773  027C               	subwf	??_main,w
  1094  0774  1D03               	skipz
  1095  0775  2F78               	goto	u555
  1096  0776  3001               	movlw	1
  1097  0777  0234               	subwf	main@x_steps,w
  1098  0778                     u555:	
  1099  0778  1C03               	skipc
  1100  0779  2F7B               	goto	u551
  1101  077A  2F7C               	goto	u550
  1102  077B                     u551:	
  1103  077B  2F89               	goto	l1013
  1104  077C                     u550:	
  1105  077C                     l1009:	
  1106                           
  1107                           ;main.c: 112:     x_out = rotate_right[x_out];
  1108  077C  0140               	movlb	0	; select bank0
  1109  077D  083C               	movf	main@x_out,w
  1110  077E  3E42               	addlw	(low (_rotate_right| 0))& (0+255)
  1111  077F  0086               	movwf	6
  1112  0780  0187               	clrf	7
  1113  0781  0801               	movf	1,w
  1114  0782  00FC               	movwf	??_main
  1115  0783  087C               	movf	??_main,w
  1116  0784  00BC               	movwf	main@x_out
  1117  0785                     l1011:	
  1118                           
  1119                           ;main.c: 113:     x_steps--;
  1120  0785  30FF               	movlw	255
  1121  0786  07B4               	addwf	main@x_steps,f
  1122  0787  30FF               	movlw	255
  1123  0788  3DB5               	addwfc	main@x_steps+1,f
  1124  0789                     l1013:	
  1125                           
  1126                           ;main.c: 115:    if(x_steps < 0) {
  1127  0789  0140               	movlb	0	; select bank0
  1128  078A  1FB5               	btfss	main@x_steps+1,7
  1129  078B  2F8D               	goto	u561
  1130  078C  2F8E               	goto	u560
  1131  078D                     u561:	
  1132  078D  2F9A               	goto	l1019
  1133  078E                     u560:	
  1134  078E                     l1015:	
  1135                           
  1136                           ;main.c: 116:     x_out = rotate_left[x_out];
  1137  078E  083C               	movf	main@x_out,w
  1138  078F  3E3E               	addlw	(low (_rotate_left| 0))& (0+255)
  1139  0790  0086               	movwf	6
  1140  0791  0187               	clrf	7
  1141  0792  0801               	movf	1,w
  1142  0793  00FC               	movwf	??_main
  1143  0794  087C               	movf	??_main,w
  1144  0795  00BC               	movwf	main@x_out
  1145  0796                     l1017:	
  1146                           
  1147                           ;main.c: 117:     x_steps++;
  1148  0796  3001               	movlw	1
  1149  0797  07B4               	addwf	main@x_steps,f
  1150  0798  3000               	movlw	0
  1151  0799  3DB5               	addwfc	main@x_steps+1,f
  1152  079A                     l1019:	
  1153                           
  1154                           ;main.c: 120:    if(y_steps > 0) {
  1155  079A  0837               	movf	main@y_steps+1,w
  1156  079B  3A80               	xorlw	128
  1157  079C  00FC               	movwf	??_main
  1158  079D  3080               	movlw	128
  1159  079E  027C               	subwf	??_main,w
  1160  079F  1D03               	skipz
  1161  07A0  2FA3               	goto	u575
  1162  07A1  3001               	movlw	1
  1163  07A2  0236               	subwf	main@y_steps,w
  1164  07A3                     u575:	
  1165  07A3  1C03               	skipc
  1166  07A4  2FA6               	goto	u571
  1167  07A5  2FA7               	goto	u570
  1168  07A6                     u571:	
  1169  07A6  2FB4               	goto	l1025
  1170  07A7                     u570:	
  1171  07A7                     l1021:	
  1172                           
  1173                           ;main.c: 121:     y_out = rotate_right[y_out];
  1174  07A7  0140               	movlb	0	; select bank0
  1175  07A8  083D               	movf	main@y_out,w
  1176  07A9  3E42               	addlw	(low (_rotate_right| 0))& (0+255)
  1177  07AA  0086               	movwf	6
  1178  07AB  0187               	clrf	7
  1179  07AC  0801               	movf	1,w
  1180  07AD  00FC               	movwf	??_main
  1181  07AE  087C               	movf	??_main,w
  1182  07AF  00BD               	movwf	main@y_out
  1183  07B0                     l1023:	
  1184                           
  1185                           ;main.c: 122:     y_steps--;
  1186  07B0  30FF               	movlw	255
  1187  07B1  07B6               	addwf	main@y_steps,f
  1188  07B2  30FF               	movlw	255
  1189  07B3  3DB7               	addwfc	main@y_steps+1,f
  1190  07B4                     l1025:	
  1191                           
  1192                           ;main.c: 124:    if(y_steps < 0) {
  1193  07B4  0140               	movlb	0	; select bank0
  1194  07B5  1FB7               	btfss	main@y_steps+1,7
  1195  07B6  2FB8               	goto	u581
  1196  07B7  2FB9               	goto	u580
  1197  07B8                     u581:	
  1198  07B8  2FC5               	goto	l1031
  1199  07B9                     u580:	
  1200  07B9                     l1027:	
  1201                           
  1202                           ;main.c: 125:     y_out = rotate_left[y_out];
  1203  07B9  083D               	movf	main@y_out,w
  1204  07BA  3E3E               	addlw	(low (_rotate_left| 0))& (0+255)
  1205  07BB  0086               	movwf	6
  1206  07BC  0187               	clrf	7
  1207  07BD  0801               	movf	1,w
  1208  07BE  00FC               	movwf	??_main
  1209  07BF  087C               	movf	??_main,w
  1210  07C0  00BD               	movwf	main@y_out
  1211  07C1                     l1029:	
  1212                           
  1213                           ;main.c: 126:     y_steps++;
  1214  07C1  3001               	movlw	1
  1215  07C2  07B6               	addwf	main@y_steps,f
  1216  07C3  3000               	movlw	0
  1217  07C4  3DB7               	addwfc	main@y_steps+1,f
  1218  07C5                     l1031:	
  1219                           
  1220                           ;main.c: 130:             LATAbits.LATA5 = y_out;
  1221  07C5  0C3D               	rrf	main@y_out,w
  1222  07C6  1C03               	skipc
  1223  07C7  1298               	bcf	24,5	;volatile
  1224  07C8  1803               	skipnc
  1225  07C9  1698               	bsf	24,5	;volatile
  1226  07CA                     l1033:	
  1227                           
  1228                           ;main.c: 131:             LATCbits.LATC5 = y_out>>1;
  1229  07CA  363D               	lsrf	main@y_out,w
  1230  07CB  00FC               	movwf	??_main
  1231  07CC  0EFC               	swapf	??_main,f
  1232  07CD  0DFC               	rlf	??_main,f
  1233  07CE  081A               	movf	26,w	;volatile
  1234  07CF  067C               	xorwf	??_main,w
  1235  07D0  39DF               	andlw	-33
  1236  07D1  067C               	xorwf	??_main,w
  1237  07D2  009A               	movwf	26	;volatile
  1238  07D3                     l1035:	
  1239                           
  1240                           ;main.c: 133:             LATCbits.LATC2 = x_out;
  1241  07D3  0C3C               	rrf	main@x_out,w
  1242  07D4  1C03               	skipc
  1243  07D5  111A               	bcf	26,2	;volatile
  1244  07D6  1803               	skipnc
  1245  07D7  151A               	bsf	26,2	;volatile
  1246  07D8                     l1037:	
  1247                           
  1248                           ;main.c: 134:             LATCbits.LATC3 = x_out>>1;
  1249  07D8  363C               	lsrf	main@x_out,w
  1250  07D9  00FC               	movwf	??_main
  1251  07DA  0DFC               	rlf	??_main,f
  1252  07DB  0DFC               	rlf	??_main,f
  1253  07DC  0DFC               	rlf	??_main,f
  1254  07DD  081A               	movf	26,w	;volatile
  1255  07DE  067C               	xorwf	??_main,w
  1256  07DF  39F7               	andlw	-9
  1257  07E0  067C               	xorwf	??_main,w
  1258  07E1  009A               	movwf	26	;volatile
  1259  07E2                     l1039:	
  1260                           
  1261                           ;main.c: 109:   while((x_steps != 0) || (y_steps != 0)) {
  1262  07E2  0834               	movf	main@x_steps,w
  1263  07E3  0435               	iorwf	main@x_steps+1,w
  1264  07E4  1D03               	btfss	3,2
  1265  07E5  2FE7               	goto	u591
  1266  07E6  2FE8               	goto	u590
  1267  07E7                     u591:	
  1268  07E7  2F6F               	goto	l1007
  1269  07E8                     u590:	
  1270  07E8                     l1041:	
  1271  07E8  0836               	movf	main@y_steps,w
  1272  07E9  0437               	iorwf	main@y_steps+1,w
  1273  07EA  1D03               	btfss	3,2
  1274  07EB  2FED               	goto	u601
  1275  07EC  2FEE               	goto	u600
  1276  07ED                     u601:	
  1277  07ED  2F6F               	goto	l1007
  1278  07EE                     u600:	
  1279  07EE  2F40               	goto	l59
  1280  07EF  3180  2802         	ljmp	start
  1281  07F1                     __end_of_main:	
  1282                           
  1283                           	psect	text1
  1284  06A5                     __ptext1:	
  1285 ;; *************** function _get_y *****************
  1286 ;; Defined at:
  1287 ;;		line 51 in file "main.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  y               2   14[BANK0 ] short 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;		None
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2   14[BANK0 ] short 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1301 ;;      Params:         0       2       0       0       0       0       0       0
  1302 ;;      Locals:         0       0       0       0       0       0       0       0
  1303 ;;      Temps:          1       0       0       0       0       0       0       0
  1304 ;;      Totals:         1       2       0       0       0       0       0       0
  1305 ;;Total ram usage:        3 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    2
  1308 ;; This function calls:
  1309 ;;		_Map
  1310 ;;		_readADC
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           
  1317                           ;psect for function _get_y
  1318  06A5                     _get_y:	
  1319  06A5                     l929:	
  1320                           ;incstack = 0
  1321                           ; Regs used in _get_y: [wreg+status,2+status,0+pclath+cstack]
  1322                           
  1323                           
  1324                           ;main.c: 52:     y = readADC(0b010100);
  1325  06A5  3014               	movlw	20
  1326  06A6  3185  2590  3186   	fcall	_readADC
  1327  06A9  0871               	movf	?_readADC+1,w
  1328  06AA  0140               	movlb	0	; select bank0
  1329  06AB  00AF               	movwf	get_y@y+1
  1330  06AC  0870               	movf	?_readADC,w
  1331  06AD  00AE               	movwf	get_y@y
  1332  06AE                     l931:	
  1333                           
  1334                           ;main.c: 54:     if(y < 31) y = 31;
  1335  06AE  082F               	movf	get_y@y+1,w
  1336  06AF  3A80               	xorlw	128
  1337  06B0  00FB               	movwf	??_get_y
  1338  06B1  3080               	movlw	128
  1339  06B2  027B               	subwf	??_get_y,w
  1340  06B3  1D03               	skipz
  1341  06B4  2EB7               	goto	u475
  1342  06B5  301F               	movlw	31
  1343  06B6  022E               	subwf	get_y@y,w
  1344  06B7                     u475:	
  1345  06B7  1803               	skipnc
  1346  06B8  2EBA               	goto	u471
  1347  06B9  2EBB               	goto	u470
  1348  06BA                     u471:	
  1349  06BA  2EC1               	goto	l935
  1350  06BB                     u470:	
  1351  06BB                     l933:	
  1352  06BB  301F               	movlw	31
  1353  06BC  0140               	movlb	0	; select bank0
  1354  06BD  00AE               	movwf	get_y@y
  1355  06BE  3000               	movlw	0
  1356  06BF  00AF               	movwf	get_y@y+1
  1357  06C0  2ED4               	goto	l939
  1358  06C1                     l935:	
  1359  06C1  0140               	movlb	0	; select bank0
  1360  06C2  082F               	movf	get_y@y+1,w
  1361  06C3  3A80               	xorlw	128
  1362  06C4  00FB               	movwf	??_get_y
  1363  06C5  3080               	movlw	128
  1364  06C6  027B               	subwf	??_get_y,w
  1365  06C7  1D03               	skipz
  1366  06C8  2ECB               	goto	u485
  1367  06C9  30D1               	movlw	209
  1368  06CA  022E               	subwf	get_y@y,w
  1369  06CB                     u485:	
  1370  06CB  1C03               	skipc
  1371  06CC  2ECE               	goto	u481
  1372  06CD  2ECF               	goto	u480
  1373  06CE                     u481:	
  1374  06CE  2ED4               	goto	l939
  1375  06CF                     u480:	
  1376  06CF                     l937:	
  1377  06CF  30D0               	movlw	208
  1378  06D0  0140               	movlb	0	; select bank0
  1379  06D1  00AE               	movwf	get_y@y
  1380  06D2  3000               	movlw	0
  1381  06D3  00AF               	movwf	get_y@y+1
  1382  06D4                     l939:	
  1383                           
  1384                           ;main.c: 56:     y = Map(y, 31, 208, 37, 218);
  1385  06D4  0140               	movlb	0	; select bank0
  1386  06D5  082F               	movf	get_y@y+1,w
  1387  06D6  00A5               	movwf	Map@x+1
  1388  06D7  082E               	movf	get_y@y,w
  1389  06D8  00A4               	movwf	Map@x
  1390  06D9  301F               	movlw	31
  1391  06DA  00A6               	movwf	Map@inMin
  1392  06DB  3000               	movlw	0
  1393  06DC  00A7               	movwf	Map@inMin+1
  1394  06DD  30D0               	movlw	208
  1395  06DE  00A8               	movwf	Map@inMax
  1396  06DF  3000               	movlw	0
  1397  06E0  00A9               	movwf	Map@inMax+1
  1398  06E1  3025               	movlw	37
  1399  06E2  00AA               	movwf	Map@outMin
  1400  06E3  3000               	movlw	0
  1401  06E4  00AB               	movwf	Map@outMin+1
  1402  06E5  30DA               	movlw	218
  1403  06E6  00AC               	movwf	Map@outMax
  1404  06E7  3000               	movlw	0
  1405  06E8  00AD               	movwf	Map@outMax+1
  1406  06E9  3185  25B3  3186   	fcall	_Map
  1407  06EC  0140               	movlb	0	; select bank0
  1408  06ED  0825               	movf	?_Map+1,w
  1409  06EE  00AF               	movwf	get_y@y+1
  1410  06EF  0824               	movf	?_Map,w
  1411  06F0  00AE               	movwf	get_y@y
  1412  06F1                     l941:	
  1413                           
  1414                           ;main.c: 57:     if( (y < (127 + 19)) && (y > (127 - 19)) ) y = 127;
  1415  06F1  082F               	movf	get_y@y+1,w
  1416  06F2  3A80               	xorlw	128
  1417  06F3  00FB               	movwf	??_get_y
  1418  06F4  3080               	movlw	128
  1419  06F5  027B               	subwf	??_get_y,w
  1420  06F6  1D03               	skipz
  1421  06F7  2EFA               	goto	u495
  1422  06F8  3092               	movlw	146
  1423  06F9  022E               	subwf	get_y@y,w
  1424  06FA                     u495:	
  1425  06FA  1803               	skipnc
  1426  06FB  2EFD               	goto	u491
  1427  06FC  2EFE               	goto	u490
  1428  06FD                     u491:	
  1429  06FD  2F11               	goto	l947
  1430  06FE                     u490:	
  1431  06FE                     l943:	
  1432  06FE  0140               	movlb	0	; select bank0
  1433  06FF  082F               	movf	get_y@y+1,w
  1434  0700  3A80               	xorlw	128
  1435  0701  00FB               	movwf	??_get_y
  1436  0702  3080               	movlw	128
  1437  0703  027B               	subwf	??_get_y,w
  1438  0704  1D03               	skipz
  1439  0705  2F08               	goto	u505
  1440  0706  306D               	movlw	109
  1441  0707  022E               	subwf	get_y@y,w
  1442  0708                     u505:	
  1443  0708  1C03               	skipc
  1444  0709  2F0B               	goto	u501
  1445  070A  2F0C               	goto	u500
  1446  070B                     u501:	
  1447  070B  2F11               	goto	l947
  1448  070C                     u500:	
  1449  070C                     l945:	
  1450  070C  307F               	movlw	127
  1451  070D  0140               	movlb	0	; select bank0
  1452  070E  00AE               	movwf	get_y@y
  1453  070F  3000               	movlw	0
  1454  0710  00AF               	movwf	get_y@y+1
  1455  0711                     l947:	
  1456  0711                     l47:	
  1457                           ;main.c: 58:     return y;
  1458                           
  1459  0711  0008               	return
  1460  0712                     __end_of_get_y:	
  1461                           
  1462                           	psect	text2
  1463  0638                     __ptext2:	
  1464 ;; *************** function _get_x *****************
  1465 ;; Defined at:
  1466 ;;		line 61 in file "main.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  x               2   14[BANK0 ] short 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;		None
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2   14[BANK0 ] short 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0, pclath, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1480 ;;      Params:         0       2       0       0       0       0       0       0
  1481 ;;      Locals:         0       0       0       0       0       0       0       0
  1482 ;;      Temps:          1       0       0       0       0       0       0       0
  1483 ;;      Totals:         1       2       0       0       0       0       0       0
  1484 ;;Total ram usage:        3 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    2
  1487 ;; This function calls:
  1488 ;;		_Map
  1489 ;;		_readADC
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           
  1496                           ;psect for function _get_x
  1497  0638                     _get_x:	
  1498  0638                     l951:	
  1499                           ;incstack = 0
  1500                           ; Regs used in _get_x: [wreg+status,2+status,0+pclath+cstack]
  1501                           
  1502                           
  1503                           ;main.c: 62:     x = readADC(0b000100);
  1504  0638  3004               	movlw	4
  1505  0639  3185  2590  3186   	fcall	_readADC
  1506  063C  0871               	movf	?_readADC+1,w
  1507  063D  0140               	movlb	0	; select bank0
  1508  063E  00AF               	movwf	get_x@x+1
  1509  063F  0870               	movf	?_readADC,w
  1510  0640  00AE               	movwf	get_x@x
  1511  0641                     l953:	
  1512                           
  1513                           ;main.c: 64:     if(x < 36) x = 36;
  1514  0641  082F               	movf	get_x@x+1,w
  1515  0642  3A80               	xorlw	128
  1516  0643  00FB               	movwf	??_get_x
  1517  0644  3080               	movlw	128
  1518  0645  027B               	subwf	??_get_x,w
  1519  0646  1D03               	skipz
  1520  0647  2E4A               	goto	u515
  1521  0648  3024               	movlw	36
  1522  0649  022E               	subwf	get_x@x,w
  1523  064A                     u515:	
  1524  064A  1803               	skipnc
  1525  064B  2E4D               	goto	u511
  1526  064C  2E4E               	goto	u510
  1527  064D                     u511:	
  1528  064D  2E54               	goto	l957
  1529  064E                     u510:	
  1530  064E                     l955:	
  1531  064E  3024               	movlw	36
  1532  064F  0140               	movlb	0	; select bank0
  1533  0650  00AE               	movwf	get_x@x
  1534  0651  3000               	movlw	0
  1535  0652  00AF               	movwf	get_x@x+1
  1536  0653  2E67               	goto	l961
  1537  0654                     l957:	
  1538  0654  0140               	movlb	0	; select bank0
  1539  0655  082F               	movf	get_x@x+1,w
  1540  0656  3A80               	xorlw	128
  1541  0657  00FB               	movwf	??_get_x
  1542  0658  3080               	movlw	128
  1543  0659  027B               	subwf	??_get_x,w
  1544  065A  1D03               	skipz
  1545  065B  2E5E               	goto	u525
  1546  065C  30D6               	movlw	214
  1547  065D  022E               	subwf	get_x@x,w
  1548  065E                     u525:	
  1549  065E  1C03               	skipc
  1550  065F  2E61               	goto	u521
  1551  0660  2E62               	goto	u520
  1552  0661                     u521:	
  1553  0661  2E67               	goto	l961
  1554  0662                     u520:	
  1555  0662                     l959:	
  1556  0662  30D5               	movlw	213
  1557  0663  0140               	movlb	0	; select bank0
  1558  0664  00AE               	movwf	get_x@x
  1559  0665  3000               	movlw	0
  1560  0666  00AF               	movwf	get_x@x+1
  1561  0667                     l961:	
  1562                           
  1563                           ;main.c: 66:     x = Map(x, 36, 213, 37, 218);
  1564  0667  0140               	movlb	0	; select bank0
  1565  0668  082F               	movf	get_x@x+1,w
  1566  0669  00A5               	movwf	Map@x+1
  1567  066A  082E               	movf	get_x@x,w
  1568  066B  00A4               	movwf	Map@x
  1569  066C  3024               	movlw	36
  1570  066D  00A6               	movwf	Map@inMin
  1571  066E  3000               	movlw	0
  1572  066F  00A7               	movwf	Map@inMin+1
  1573  0670  30D5               	movlw	213
  1574  0671  00A8               	movwf	Map@inMax
  1575  0672  3000               	movlw	0
  1576  0673  00A9               	movwf	Map@inMax+1
  1577  0674  3025               	movlw	37
  1578  0675  00AA               	movwf	Map@outMin
  1579  0676  3000               	movlw	0
  1580  0677  00AB               	movwf	Map@outMin+1
  1581  0678  30DA               	movlw	218
  1582  0679  00AC               	movwf	Map@outMax
  1583  067A  3000               	movlw	0
  1584  067B  00AD               	movwf	Map@outMax+1
  1585  067C  3185  25B3  3186   	fcall	_Map
  1586  067F  0140               	movlb	0	; select bank0
  1587  0680  0825               	movf	?_Map+1,w
  1588  0681  00AF               	movwf	get_x@x+1
  1589  0682  0824               	movf	?_Map,w
  1590  0683  00AE               	movwf	get_x@x
  1591  0684                     l963:	
  1592                           
  1593                           ;main.c: 67:     if( (x < (127 + 19)) && (x > (127 - 19)) ) x = 127;
  1594  0684  082F               	movf	get_x@x+1,w
  1595  0685  3A80               	xorlw	128
  1596  0686  00FB               	movwf	??_get_x
  1597  0687  3080               	movlw	128
  1598  0688  027B               	subwf	??_get_x,w
  1599  0689  1D03               	skipz
  1600  068A  2E8D               	goto	u535
  1601  068B  3092               	movlw	146
  1602  068C  022E               	subwf	get_x@x,w
  1603  068D                     u535:	
  1604  068D  1803               	skipnc
  1605  068E  2E90               	goto	u531
  1606  068F  2E91               	goto	u530
  1607  0690                     u531:	
  1608  0690  2EA4               	goto	l969
  1609  0691                     u530:	
  1610  0691                     l965:	
  1611  0691  0140               	movlb	0	; select bank0
  1612  0692  082F               	movf	get_x@x+1,w
  1613  0693  3A80               	xorlw	128
  1614  0694  00FB               	movwf	??_get_x
  1615  0695  3080               	movlw	128
  1616  0696  027B               	subwf	??_get_x,w
  1617  0697  1D03               	skipz
  1618  0698  2E9B               	goto	u545
  1619  0699  306D               	movlw	109
  1620  069A  022E               	subwf	get_x@x,w
  1621  069B                     u545:	
  1622  069B  1C03               	skipc
  1623  069C  2E9E               	goto	u541
  1624  069D  2E9F               	goto	u540
  1625  069E                     u541:	
  1626  069E  2EA4               	goto	l969
  1627  069F                     u540:	
  1628  069F                     l967:	
  1629  069F  307F               	movlw	127
  1630  06A0  0140               	movlb	0	; select bank0
  1631  06A1  00AE               	movwf	get_x@x
  1632  06A2  3000               	movlw	0
  1633  06A3  00AF               	movwf	get_x@x+1
  1634  06A4                     l969:	
  1635  06A4                     l54:	
  1636                           ;main.c: 68:     return x;
  1637                           
  1638  06A4  0008               	return
  1639  06A5                     __end_of_get_x:	
  1640                           
  1641                           	psect	text3
  1642  0590                     __ptext3:	
  1643 ;; *************** function _readADC *****************
  1644 ;; Defined at:
  1645 ;;		line 11 in file "ADC.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  channel         1    wreg     unsigned char 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  channel         1    4[COMMON] unsigned char 
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  2    0[COMMON] unsigned int 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1659 ;;      Params:         2       0       0       0       0       0       0       0
  1660 ;;      Locals:         1       0       0       0       0       0       0       0
  1661 ;;      Temps:          2       0       0       0       0       0       0       0
  1662 ;;      Totals:         5       0       0       0       0       0       0       0
  1663 ;;Total ram usage:        5 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; This function calls:
  1666 ;;		Nothing
  1667 ;; This function is called by:
  1668 ;;		_get_y
  1669 ;;		_get_x
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _readADC
  1675  0590                     _readADC:	
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in _readADC: [wreg+status,2+status,0]
  1679                           ;readADC@channel stored from wreg
  1680  0590  00F4               	movwf	readADC@channel
  1681  0591                     l889:	
  1682                           
  1683                           ;ADC.c: 13:     ADCON1 = 0b01100000;
  1684  0591  3060               	movlw	96
  1685  0592  0141               	movlb	1	; select bank1
  1686  0593  009E               	movwf	30	;volatile
  1687  0594                     l891:	
  1688                           
  1689                           ;ADC.c: 14:     ADCON0 = (channel << 2) | 0b1;
  1690  0594  0874               	movf	readADC@channel,w
  1691  0595  00F2               	movwf	??_readADC
  1692  0596  3001               	movlw	1
  1693  0597                     u455:	
  1694  0597  35F2               	lslf	??_readADC,f
  1695  0598  3EFF               	addlw	-1
  1696  0599  1D03               	skipz
  1697  059A  2D97               	goto	u455
  1698  059B  3572               	lslf	??_readADC,w
  1699  059C  3801               	iorlw	1
  1700  059D  009D               	movwf	29	;volatile
  1701  059E                     l893:	
  1702                           
  1703                           ;ADC.c: 16:     _delay((unsigned long)((5)*(32000000/4000.0)));
  1704  059E  3034               	movlw	52
  1705  059F  00F2               	movwf	??_readADC
  1706  05A0  30F2               	movlw	242
  1707  05A1                     u617:	
  1708  05A1  0B89               	decfsz	9,f
  1709  05A2  2DA1               	goto	u617
  1710  05A3  0BF2               	decfsz	??_readADC,f
  1711  05A4  2DA1               	goto	u617
  1712  05A5                     l895:	
  1713                           
  1714                           ;ADC.c: 18:     ADCON0bits.GOnDONE = 1;
  1715  05A5  0141               	movlb	1	; select bank1
  1716  05A6  149D               	bsf	29,1	;volatile
  1717  05A7                     l82:	
  1718                           ;ADC.c: 19:     while (ADCON0bits.GOnDONE);
  1719                           
  1720  05A7  189D               	btfsc	29,1	;volatile
  1721  05A8  2DAA               	goto	u461
  1722  05A9  2DAB               	goto	u460
  1723  05AA                     u461:	
  1724  05AA  2DA7               	goto	l82
  1725  05AB                     u460:	
  1726  05AB                     l897:	
  1727                           
  1728                           ;ADC.c: 22:     return ADRESH;
  1729  05AB  081C               	movf	28,w	;volatile
  1730  05AC  00F2               	movwf	??_readADC
  1731  05AD  01F3               	clrf	??_readADC+1
  1732  05AE  0872               	movf	??_readADC,w
  1733  05AF  00F0               	movwf	?_readADC
  1734  05B0  0873               	movf	??_readADC+1,w
  1735  05B1  00F1               	movwf	?_readADC+1
  1736  05B2                     l85:	
  1737  05B2  0008               	return
  1738  05B3                     __end_of_readADC:	
  1739                           
  1740                           	psect	text4
  1741  05B3                     __ptext4:	
  1742 ;; *************** function _Map *****************
  1743 ;; Defined at:
  1744 ;;		line 16 in file "main.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  x               2    4[BANK0 ] int 
  1747 ;;  inMin           2    6[BANK0 ] int 
  1748 ;;  inMax           2    8[BANK0 ] int 
  1749 ;;  outMin          2   10[BANK0 ] int 
  1750 ;;  outMax          2   12[BANK0 ] int 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  2    4[BANK0 ] short 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, status,0, pclath, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1762 ;;      Params:         0      10       0       0       0       0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0
  1765 ;;      Totals:         0      10       0       0       0       0       0       0
  1766 ;;Total ram usage:       10 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    1
  1769 ;; This function calls:
  1770 ;;		___awdiv
  1771 ;;		___wmul
  1772 ;; This function is called by:
  1773 ;;		_get_y
  1774 ;;		_get_x
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _Map
  1780  05B3                     _Map:	
  1781  05B3                     l885:	
  1782                           ;incstack = 0
  1783                           ; Regs used in _Map: [wreg+status,2+status,0+pclath+cstack]
  1784                           
  1785                           
  1786                           ;main.c: 18:     return (((x - inMin) * (outMax - outMin)) / (inMax - inMin)) +outMin;
  1787  05B3  0140               	movlb	0	; select bank0
  1788  05B4  0826               	movf	Map@inMin,w
  1789  05B5  0228               	subwf	Map@inMax,w
  1790  05B6  00F6               	movwf	___awdiv@divisor
  1791  05B7  0827               	movf	Map@inMin+1,w
  1792  05B8  3B29               	subwfb	Map@inMax+1,w
  1793  05B9  00F7               	movwf	___awdiv@divisor+1
  1794  05BA  0826               	movf	Map@inMin,w
  1795  05BB  0224               	subwf	Map@x,w
  1796  05BC  00F0               	movwf	___wmul@multiplier
  1797  05BD  0827               	movf	Map@inMin+1,w
  1798  05BE  3B25               	subwfb	Map@x+1,w
  1799  05BF  00F1               	movwf	___wmul@multiplier+1
  1800  05C0  082A               	movf	Map@outMin,w
  1801  05C1  022C               	subwf	Map@outMax,w
  1802  05C2  00F2               	movwf	___wmul@multiplicand
  1803  05C3  082B               	movf	Map@outMin+1,w
  1804  05C4  3B2D               	subwfb	Map@outMax+1,w
  1805  05C5  00F3               	movwf	___wmul@multiplicand+1
  1806  05C6  3185  2571  3185   	fcall	___wmul
  1807  05C9  0871               	movf	?___wmul+1,w
  1808  05CA  00F9               	movwf	___awdiv@dividend+1
  1809  05CB  0870               	movf	?___wmul,w
  1810  05CC  00F8               	movwf	___awdiv@dividend
  1811  05CD  3185  25D8  3185   	fcall	___awdiv
  1812  05D0  0140               	movlb	0	; select bank0
  1813  05D1  082A               	movf	Map@outMin,w
  1814  05D2  0776               	addwf	?___awdiv,w
  1815  05D3  00A4               	movwf	?_Map
  1816  05D4  082B               	movf	Map@outMin+1,w
  1817  05D5  3D77               	addwfc	?___awdiv+1,w
  1818  05D6  00A5               	movwf	?_Map+1
  1819  05D7                     l37:	
  1820  05D7  0008               	return
  1821  05D8                     __end_of_Map:	
  1822                           
  1823                           	psect	text5
  1824  0571                     __ptext5:	
  1825 ;; *************** function ___wmul *****************
  1826 ;; Defined at:
  1827 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;  multiplier      2    0[COMMON] unsigned int 
  1830 ;;  multiplicand    2    2[COMMON] unsigned int 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  product         2    4[COMMON] unsigned int 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  2    0[COMMON] unsigned int 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1842 ;;      Params:         4       0       0       0       0       0       0       0
  1843 ;;      Locals:         2       0       0       0       0       0       0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0
  1845 ;;      Totals:         6       0       0       0       0       0       0       0
  1846 ;;Total ram usage:        6 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_Map
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function ___wmul
  1857  0571                     ___wmul:	
  1858  0571                     l827:	
  1859                           ;incstack = 0
  1860                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1861                           
  1862  0571  01F4               	clrf	___wmul@product
  1863  0572  01F5               	clrf	___wmul@product+1
  1864  0573                     l829:	
  1865  0573  1C70               	btfss	___wmul@multiplier,0
  1866  0574  2D76               	goto	u311
  1867  0575  2D77               	goto	u310
  1868  0576                     u311:	
  1869  0576  2D7B               	goto	l153
  1870  0577                     u310:	
  1871  0577                     l831:	
  1872  0577  0872               	movf	___wmul@multiplicand,w
  1873  0578  07F4               	addwf	___wmul@product,f
  1874  0579  0873               	movf	___wmul@multiplicand+1,w
  1875  057A  3DF5               	addwfc	___wmul@product+1,f
  1876  057B                     l153:	
  1877  057B  3001               	movlw	1
  1878  057C                     u325:	
  1879  057C  35F2               	lslf	___wmul@multiplicand,f
  1880  057D  0DF3               	rlf	___wmul@multiplicand+1,f
  1881  057E  0B89               	decfsz	9,f
  1882  057F  2D7C               	goto	u325
  1883  0580                     l833:	
  1884  0580  3001               	movlw	1
  1885  0581                     u335:	
  1886  0581  36F1               	lsrf	___wmul@multiplier+1,f
  1887  0582  0CF0               	rrf	___wmul@multiplier,f
  1888  0583  0B89               	decfsz	9,f
  1889  0584  2D81               	goto	u335
  1890  0585                     l835:	
  1891  0585  0870               	movf	___wmul@multiplier,w
  1892  0586  0471               	iorwf	___wmul@multiplier+1,w
  1893  0587  1D03               	btfss	3,2
  1894  0588  2D8A               	goto	u341
  1895  0589  2D8B               	goto	u340
  1896  058A                     u341:	
  1897  058A  2D73               	goto	l829
  1898  058B                     u340:	
  1899  058B                     l837:	
  1900  058B  0875               	movf	___wmul@product+1,w
  1901  058C  00F1               	movwf	?___wmul+1
  1902  058D  0874               	movf	___wmul@product,w
  1903  058E  00F0               	movwf	?___wmul
  1904  058F                     l155:	
  1905  058F  0008               	return
  1906  0590                     __end_of___wmul:	
  1907                           
  1908                           	psect	text6
  1909  05D8                     __ptext6:	
  1910 ;; *************** function ___awdiv *****************
  1911 ;; Defined at:
  1912 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  divisor         2    6[COMMON] int 
  1915 ;;  dividend        2    8[COMMON] int 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  quotient        2    2[BANK0 ] int 
  1918 ;;  sign            1    1[BANK0 ] unsigned char 
  1919 ;;  counter         1    0[BANK0 ] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2    6[COMMON] int 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1929 ;;      Params:         4       0       0       0       0       0       0       0
  1930 ;;      Locals:         0       4       0       0       0       0       0       0
  1931 ;;      Temps:          1       0       0       0       0       0       0       0
  1932 ;;      Totals:         5       4       0       0       0       0       0       0
  1933 ;;Total ram usage:        9 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_Map
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           
  1943                           ;psect for function ___awdiv
  1944  05D8                     ___awdiv:	
  1945  05D8                     l841:	
  1946                           ;incstack = 0
  1947                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1948                           
  1949  05D8  0140               	movlb	0	; select bank0
  1950  05D9  01A1               	clrf	___awdiv@sign
  1951  05DA                     l843:	
  1952  05DA  1FF7               	btfss	___awdiv@divisor+1,7
  1953  05DB  2DDD               	goto	u351
  1954  05DC  2DDE               	goto	u350
  1955  05DD                     u351:	
  1956  05DD  2DE5               	goto	l849
  1957  05DE                     u350:	
  1958  05DE                     l845:	
  1959  05DE  09F6               	comf	___awdiv@divisor,f
  1960  05DF  09F7               	comf	___awdiv@divisor+1,f
  1961  05E0  0AF6               	incf	___awdiv@divisor,f
  1962  05E1  1903               	skipnz
  1963  05E2  0AF7               	incf	___awdiv@divisor+1,f
  1964  05E3                     l847:	
  1965  05E3  01A1               	clrf	___awdiv@sign
  1966  05E4  0AA1               	incf	___awdiv@sign,f
  1967  05E5                     l849:	
  1968  05E5  1FF9               	btfss	___awdiv@dividend+1,7
  1969  05E6  2DE8               	goto	u361
  1970  05E7  2DE9               	goto	u360
  1971  05E8                     u361:	
  1972  05E8  2DF2               	goto	l855
  1973  05E9                     u360:	
  1974  05E9                     l851:	
  1975  05E9  09F8               	comf	___awdiv@dividend,f
  1976  05EA  09F9               	comf	___awdiv@dividend+1,f
  1977  05EB  0AF8               	incf	___awdiv@dividend,f
  1978  05EC  1903               	skipnz
  1979  05ED  0AF9               	incf	___awdiv@dividend+1,f
  1980  05EE                     l853:	
  1981  05EE  3001               	movlw	1
  1982  05EF  00FA               	movwf	??___awdiv
  1983  05F0  087A               	movf	??___awdiv,w
  1984  05F1  06A1               	xorwf	___awdiv@sign,f
  1985  05F2                     l855:	
  1986  05F2  01A2               	clrf	___awdiv@quotient
  1987  05F3  01A3               	clrf	___awdiv@quotient+1
  1988  05F4                     l857:	
  1989  05F4  0876               	movf	___awdiv@divisor,w
  1990  05F5  0477               	iorwf	___awdiv@divisor+1,w
  1991  05F6  1903               	btfsc	3,2
  1992  05F7  2DF9               	goto	u371
  1993  05F8  2DFA               	goto	u370
  1994  05F9                     u371:	
  1995  05F9  2E29               	goto	l877
  1996  05FA                     u370:	
  1997  05FA                     l859:	
  1998  05FA  01A0               	clrf	___awdiv@counter
  1999  05FB  0AA0               	incf	___awdiv@counter,f
  2000  05FC  2E06               	goto	l865
  2001  05FD                     l861:	
  2002  05FD  3001               	movlw	1
  2003  05FE                     u385:	
  2004  05FE  35F6               	lslf	___awdiv@divisor,f
  2005  05FF  0DF7               	rlf	___awdiv@divisor+1,f
  2006  0600  0B89               	decfsz	9,f
  2007  0601  2DFE               	goto	u385
  2008  0602                     l863:	
  2009  0602  3001               	movlw	1
  2010  0603  00FA               	movwf	??___awdiv
  2011  0604  087A               	movf	??___awdiv,w
  2012  0605  07A0               	addwf	___awdiv@counter,f
  2013  0606                     l865:	
  2014  0606  1FF7               	btfss	___awdiv@divisor+1,7
  2015  0607  2E09               	goto	u391
  2016  0608  2E0A               	goto	u390
  2017  0609                     u391:	
  2018  0609  2DFD               	goto	l861
  2019  060A                     u390:	
  2020  060A                     l867:	
  2021  060A  3001               	movlw	1
  2022  060B                     u405:	
  2023  060B  35A2               	lslf	___awdiv@quotient,f
  2024  060C  0DA3               	rlf	___awdiv@quotient+1,f
  2025  060D  0B89               	decfsz	9,f
  2026  060E  2E0B               	goto	u405
  2027  060F  0877               	movf	___awdiv@divisor+1,w
  2028  0610  0279               	subwf	___awdiv@dividend+1,w
  2029  0611  1D03               	skipz
  2030  0612  2E15               	goto	u415
  2031  0613  0876               	movf	___awdiv@divisor,w
  2032  0614  0278               	subwf	___awdiv@dividend,w
  2033  0615                     u415:	
  2034  0615  1C03               	skipc
  2035  0616  2E18               	goto	u411
  2036  0617  2E19               	goto	u410
  2037  0618                     u411:	
  2038  0618  2E1E               	goto	l873
  2039  0619                     u410:	
  2040  0619                     l869:	
  2041  0619  0876               	movf	___awdiv@divisor,w
  2042  061A  02F8               	subwf	___awdiv@dividend,f
  2043  061B  0877               	movf	___awdiv@divisor+1,w
  2044  061C  3BF9               	subwfb	___awdiv@dividend+1,f
  2045  061D                     l871:	
  2046  061D  1422               	bsf	___awdiv@quotient,0
  2047  061E                     l873:	
  2048  061E  3001               	movlw	1
  2049  061F                     u425:	
  2050  061F  36F7               	lsrf	___awdiv@divisor+1,f
  2051  0620  0CF6               	rrf	___awdiv@divisor,f
  2052  0621  0B89               	decfsz	9,f
  2053  0622  2E1F               	goto	u425
  2054  0623                     l875:	
  2055  0623  3001               	movlw	1
  2056  0624  02A0               	subwf	___awdiv@counter,f
  2057  0625  1D03               	btfss	3,2
  2058  0626  2E28               	goto	u431
  2059  0627  2E29               	goto	u430
  2060  0628                     u431:	
  2061  0628  2E0A               	goto	l867
  2062  0629                     u430:	
  2063  0629                     l877:	
  2064  0629  0821               	movf	___awdiv@sign,w
  2065  062A  1903               	btfsc	3,2
  2066  062B  2E2D               	goto	u441
  2067  062C  2E2E               	goto	u440
  2068  062D                     u441:	
  2069  062D  2E33               	goto	l881
  2070  062E                     u440:	
  2071  062E                     l879:	
  2072  062E  09A2               	comf	___awdiv@quotient,f
  2073  062F  09A3               	comf	___awdiv@quotient+1,f
  2074  0630  0AA2               	incf	___awdiv@quotient,f
  2075  0631  1903               	skipnz
  2076  0632  0AA3               	incf	___awdiv@quotient+1,f
  2077  0633                     l881:	
  2078  0633  0823               	movf	___awdiv@quotient+1,w
  2079  0634  00F7               	movwf	?___awdiv+1
  2080  0635  0822               	movf	___awdiv@quotient,w
  2081  0636  00F6               	movwf	?___awdiv
  2082  0637                     l306:	
  2083  0637  0008               	return
  2084  0638                     __end_of___awdiv:	
  2085                           
  2086                           	psect	text7
  2087  0556                     __ptext7:	
  2088 ;; *************** function _PIC_SETUP *****************
  2089 ;; Defined at:
  2090 ;;		line 21 in file "main.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2104 ;;      Params:         0       0       0       0       0       0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0
  2107 ;;      Totals:         0       0       0       0       0       0       0       0
  2108 ;;Total ram usage:        0 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _PIC_SETUP
  2119  0556                     _PIC_SETUP:	
  2120  0556                     l901:	
  2121                           ;incstack = 0
  2122                           ; Regs used in _PIC_SETUP: [wreg+status,2]
  2123                           
  2124                           
  2125                           ;main.c: 23:     CPUDOZEbits.IDLEN = 0;
  2126  0556  0151               	movlb	17	; select bank17
  2127  0557  138C               	bcf	12,7	;volatile
  2128  0558                     l903:	
  2129                           
  2130                           ;main.c: 24:     VREGCON = 0b00000011;
  2131  0558  3003               	movlw	3
  2132  0559  0150               	movlb	16	; select bank16
  2133  055A  0092               	movwf	18	;volatile
  2134                           
  2135                           ;main.c: 27:     TRISA = 0xFF;
  2136  055B  30FF               	movlw	255
  2137  055C  0140               	movlb	0	; select bank0
  2138  055D  0092               	movwf	18	;volatile
  2139                           
  2140                           ;main.c: 28:     TRISC = 0xFF;
  2141  055E  30FF               	movlw	255
  2142  055F  0094               	movwf	20	;volatile
  2143  0560                     l905:	
  2144                           
  2145                           ;main.c: 29:     ANSELA = 0;
  2146  0560  017E               	movlb	62	; select bank62
  2147  0561  01B8               	clrf	56	;volatile
  2148  0562                     l907:	
  2149                           
  2150                           ;main.c: 30:     ANSELC = 0;
  2151  0562  01CE               	clrf	78	;volatile
  2152  0563                     l909:	
  2153                           
  2154                           ;main.c: 31:     ANSELAbits.ANSA4 = 1;
  2155  0563  1638               	bsf	56,4	;volatile
  2156  0564                     l911:	
  2157                           
  2158                           ;main.c: 32:     ANSELCbits.ANSC4 = 1;
  2159  0564  164E               	bsf	78,4	;volatile
  2160  0565                     l913:	
  2161                           
  2162                           ;main.c: 34:     ODCONAbits.ODCA5 = 0;
  2163  0565  12BA               	bcf	58,5	;volatile
  2164  0566                     l915:	
  2165                           
  2166                           ;main.c: 35:     ODCONCbits.ODCC5 = 0;
  2167  0566  12D0               	bcf	80,5	;volatile
  2168  0567                     l917:	
  2169                           
  2170                           ;main.c: 36:     TRISAbits.TRISA5 = 0;
  2171  0567  0140               	movlb	0	; select bank0
  2172  0568  1292               	bcf	18,5	;volatile
  2173  0569                     l919:	
  2174                           
  2175                           ;main.c: 37:     TRISCbits.TRISC5 = 0;
  2176  0569  1294               	bcf	20,5	;volatile
  2177  056A                     l921:	
  2178                           
  2179                           ;main.c: 39:     ODCONCbits.ODCC2 = 0;
  2180  056A  017E               	movlb	62	; select bank62
  2181  056B  1150               	bcf	80,2	;volatile
  2182  056C                     l923:	
  2183                           
  2184                           ;main.c: 40:     ODCONCbits.ODCC3 = 0;
  2185  056C  11D0               	bcf	80,3	;volatile
  2186  056D                     l925:	
  2187                           
  2188                           ;main.c: 41:     TRISCbits.TRISC2 = 0;
  2189  056D  0140               	movlb	0	; select bank0
  2190  056E  1114               	bcf	20,2	;volatile
  2191  056F                     l927:	
  2192                           
  2193                           ;main.c: 42:     TRISCbits.TRISC3 = 0;
  2194  056F  1194               	bcf	20,3	;volatile
  2195  0570                     l40:	
  2196  0570  0008               	return
  2197  0571                     __end_of_PIC_SETUP:	
  2198  007E                     btemp	set	126	;btemp
  2199  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     30      38
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_get_x
    _main->_get_y
    _Map->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_get_x
    _main->_get_y
    _get_y->_Map
    _get_x->_Map
    _Map->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    4526
                                             12 COMMON     1     1      0
                                             16 BANK0     14    14      0
                          _PIC_SETUP
                              _get_x
                              _get_y
 ---------------------------------------------------------------------------------
 (1) _get_y                                                3     1      2    1921
                                             11 COMMON     1     1      0
                                             14 BANK0      2     0      2
                                _Map
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _get_x                                                3     1      2    1921
                                             11 COMMON     1     1      0
                                             14 BANK0      2     0      2
                                _Map
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Map                                                 10     0     10    1610
                                              4 BANK0     10     0     10
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PIC_SETUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PIC_SETUP
   _get_x
     _Map
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _readADC
   _get_y
     _Map
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      33       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      26       6       47.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      33      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Sep 15 19:36:20 2020

            __CFG_CP$OFF 0000              _rotate_left 003E                       l40 0570  
                     l37 05D7                       l54 06A4                       l47 0711  
                     l82 05A7                       l59 0740                       l85 05B2  
           ___awdiv@sign 0021      ___wmul@multiplicand 0072                      l153 057B  
                    l306 0637                      l155 058F                      l901 0556  
                    l911 0564                      l903 0558                      l831 0577  
                    l921 056A                      l913 0565                      l905 0560  
                    l841 05D8                      l833 0580                      l923 056C  
                    l915 0566                      l907 0562                      l851 05E9  
                    l843 05DA                      l835 0585                      l827 0571  
                    l931 06AE                      l925 056D                      l917 0567  
                    l909 0563                      l861 05FD                      l853 05EE  
                    l845 05DE                      l837 058B                      l829 0573  
                    l941 06F1                      l933 06BB                      l927 056F  
                    l919 0569                      l871 061D                      l863 0602  
                    l855 05F2                      l847 05E3                      l951 0638  
                    l943 06FE                      l935 06C1                      l881 0633  
                    l873 061E                      l865 0606                      l857 05F4  
                    l849 05E5                      l961 0667                      l953 0641  
                    l945 070C                      l937 06CF                      l929 06A5  
                    l875 0623                      l867 060A                      l859 05FA  
                    l891 0594                      l963 0684                      l955 064E  
                    l947 0711                      l939 06D4                      l869 0619  
                    l877 0629                      l885 05B3                      l893 059E  
                    l965 0691                      l957 0654                      l981 0736  
                    l973 0712                      l879 062E                      l895 05A5  
                    l967 069F                      l959 0662                      l991 073C  
                    l983 073A                      l975 0715                      l897 05AB  
                    l889 0591                      l969 06A4                      l993 073D  
                    l985 073A                      l977 0718                      l995 073E  
                    l987 073A                      l979 0732                      l997 073F  
                    l989 073B                      l999 075A                      u310 0577  
                    u311 0576                      u410 0619                      u411 0618  
                    u340 058B                      u500 070C                      u405 060B  
                    u341 058A                      u325 057C                      u501 070B  
                    u430 0629                      u350 05DE                      u510 064E  
                    u431 0628                      u415 0615                      u351 05DD  
                    u335 0581                      u511 064D                      u440 062E  
                    u360 05E9                      u520 0662                      u600 07EE  
                    u441 062D                      u425 061F                      u361 05E8  
                    u521 0661                      u505 0708                      u601 07ED  
                    u370 05FA                      u530 0691                      u371 05F9  
                    u531 0690                      u515 064A                      u460 05AB  
                    u540 069F                      u461 05AA                      u541 069E  
                    u525 065E                      u390 060A                      u470 06BB  
                    u550 077C                      u391 0609                      u455 0597  
                    u535 068D                      u471 06BA                      u551 077B  
                    u480 06CF                      u560 078E                      u385 05FE  
                    u617 05A1                      u545 069B                      u481 06CE  
                    u561 078D                      u490 06FE                      u570 07A7  
                    u491 06FD                      u475 06B7                      u571 07A6  
                    u555 0778                      u580 07B9                      u485 06CB  
                    u581 07B8                      u590 07E8                      u495 06FA  
                    u591 07E7                      u575 07A3             _rotate_right 0042  
                    _Map 05B3             __CFG_BORV$LO 0000                      wreg 0009  
          __CFG_BBEN$OFF 0000             __CFG_LVP$OFF 0000             __CFG_ZCD$OFF 0000  
                   ?_Map 0024                     l1001 0760                     l1011 0785  
                   l1003 0766                     l1021 07A7                     l1013 0789  
                   l1005 076A                     l1031 07C5                     l1023 07B0  
                   l1015 078E                     l1007 076F                     l1041 07E8  
                   l1033 07CA                     l1025 07B4                     l1017 0796  
                   l1009 077C                     l1035 07D3                     l1027 07B9  
                   l1019 079A                     l1037 07D8                     l1029 07C1  
                   l1039 07E2             __CFG_WDTE$ON 0000                     Map@x 0024  
          __CFG_FCMEN$ON 0000                     _main 0712                     fsr0h 0005  
                   fsr1h 0007                     fsr0l 0004                     indf1 0001  
                   fsr1l 0006                     btemp 007E              main@x_steps 0034  
                   start 0002              main@y_steps 0036            __CFG_CSWEN$ON 0000  
                  ??_Map 007B       __size_of_PIC_SETUP 001B                    ?_main 0070  
        __end_of___awdiv 0638          ___awdiv@divisor 0076          ___awdiv@counter 0020  
                  _TRISA 0012                    _TRISC 0014            __CFG_WRTB$OFF 0000  
          __CFG_WRTC$OFF 0000          __end_of_readADC 05B3                    _get_x 0638  
                  _get_y 06A5                    main@x 0038                    main@y 003A  
         __CFG_BOREN$OFF 0000                    status 0003                    wtemp0 007E  
         __CFG_MCLRE$OFF 0000          __initialization 07F1             __end_of_main 07F1  
         __CFG_SAFEN$OFF 0000                   ??_main 007C                   ?_get_x 002E  
                 ?_get_y 002E                   _ADCON0 009D                   _ADCON1 009E  
                 _ADRESH 009C         ___awdiv@dividend 0078                   _ANSELA 1F38  
                 _ANSELC 1F4E        __end_of_PIC_SETUP 0571           __CFG_PWRTE$OFF 0000  
                 ___wmul 0571                ??___awdiv 007A           __CFG_STVREN$ON 0000  
       ___awdiv@quotient 0022                   get_x@x 002E                   get_y@y 002E  
              ??_readADC 0072  __end_of__initialization 07FD           __pcstackCOMMON 0070  
           __pidataBANK0 054E            __end_of_get_x 06A5            __end_of_get_y 0712  
                ??_get_x 007B                  ??_get_y 007B               __pmaintext 0712  
                ?___wmul 0070      __CFG_RSTOSC$HFINT32 0000                  _VREGCON 0812  
                ___awdiv 05D8          __size_of___wmul 001F                  __ptext1 06A5  
                __ptext2 0638                  __ptext3 0590                  __ptext4 05B3  
                __ptext5 0571                  __ptext6 05D8                  __ptext7 0556  
        __CFG_WRTAPP$OFF 0000                  _readADC 0590             __size_of_Map 0025  
        __CFG_WRTSAF$OFF 0000     end_of_initialization 07FD                  init_ram 0548  
                initloop 0549                _PIC_SETUP 0556    __CFG_WDTCPS$WDTCPS_13 0000  
              Map@outMax 002C                Map@outMin 002A     __CFG_WDTCCS$LFINTOSC 0000  
              _TRISAbits 0012                _TRISCbits 0014         __CFG_FEXTOSC$OFF 0000  
             ?_PIC_SETUP 0070               main@x_prev 0030               main@y_prev 0032  
         __end_of___wmul 0590      start_initialization 07F1              __end_of_Map 05D8  
       __CFG_LPBOREN$OFF 0000                 ??___wmul 0074              __pdataBANK0 003E  
              ___latbits 0001            __pcstackBANK0 0020              ??_PIC_SETUP 0070  
               ?___awdiv 0076         __CFG_PPS1WAY$OFF 0000                 ?_readADC 0070  
         __size_of_get_x 006D           __size_of_get_y 006D              _CPUDOZEbits 088C  
         ___wmul@product 0074                 _LATAbits 0018                 _LATCbits 001A  
      __CFG_BBSIZE$BB512 0000                 Map@inMax 0028                 Map@inMin 0026  
             _ADCON0bits 009D        ___wmul@multiplier 0070                main@x_out 003C  
              main@y_out 003D         __size_of___awdiv 0060           readADC@channel 0074  
             _ANSELAbits 1F38               _ANSELCbits 1F4E         __size_of_readADC 0023  
          __size_of_main 00DF     __CFG_WDTCWS$WDTCWS_7 0000               _ODCONAbits 1F3A  
             _ODCONCbits 1F50        __CFG_CLKOUTEN$OFF 0000  
